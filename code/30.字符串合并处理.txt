题目描述
按照指定规则对输入的字符串进行处理。
详细描述：
将输入的两个字符串合并。
对合并后的字符串进行排序，要求为：下标为奇数的字符和下标为偶数的字符分别从小到大排序。这里的下标意思是字符在字符串中的位置。
对排序后的字符串进行操作，如果字符为‘0’――‘9’或者‘A’――‘F’或者‘a’――‘f’，则对他们所代表的16进制的数进行BIT倒序的操作，并转换为相应的大写字符。如字符为‘4’，为0100b，则翻转后为0010b，也就是2。转换后的字符为‘2’；?如字符为‘7’，为0111b，则翻转后为1110b，也就是e。转换后的字符为大写‘E’。

举例：输入str1为"dec"，str2为"fab"，合并为“decfab”，分别对“dca”和“efb”进行排序，排序后为“abcedf”，转换后为“5D37BF”
接口设计及说明：
/*
功能:字符串处理
输入:两个字符串,需要异常处理
输出:合并处理后的字符串，具体要求参考文档
返回:无
*/
void?ProcessString(char*?str1,char?*str2,char?*?strOutput)
{
}


输入描述:

输入两个字符串
输出描述:

输出转化后的结果
示例1
输入
复制
dec fab
输出
复制
5D37BF

来自 <https://www.nowcoder.com/practice/d3d8e23870584782b3dd48f26cb39c8f?tpId=37&tqId=21253&tPage=2&rp=&ru=%2Fta%2Fhuawei&qru=%2Fta%2Fhuawei%2Fquestion-ranking> 
#include<iostream>
#include<string>
#include<algorithm>
using namespace std;
const string helper1 = "0123456789abcdefABCDEF";
const string helper2 = "084C2A6E195D3B7F5D3B7F";

string ProcessString(string mergestr)
{
    //奇数 偶数 分别拆开
    string strji, strou;
    for(int i = 0; i < mergestr.size(); i ++)
        if(i % 2 == 0)
            strou += mergestr[i];
        else
            strji += mergestr[i];
        
    //奇数偶数排序
    sort(strji.begin(), strji.end());
    sort(strou.begin(), strou.end());
        
        
    //合并新的
    int index = 0;
    for(int i  = 0; i < mergestr.size(); i ++)
        if(i % 2 == 0)
            mergestr[i] = strou[i / 2];
        else
            mergestr[i] = strji[i / 2];
                
    //加密
    for(int i = 0; i < mergestr.size(); i ++)
    {
        int idx = helper1.find(mergestr[i]);
        if(idx != -1)
            mergestr[i] = helper2[idx];
    }
        
    return mergestr;
}

int main(){
    string str1, str2, mergestr;
    while(cin >> str1 >> str2)
    {
        mergestr = str1 + str2;
        mergestr =  ProcessString(mergestr);
        cout << mergestr << endl;
    }

    return 0;
}
