题目描述
子网掩码是用来判断任意两台计算机的IP地址是否属于同一子网络的根据。
子网掩码与IP地址结构相同，是32位二进制数，其中网络号部分全为“1”和主机号部分全为“0”。利用子网掩码可以判断两台主机是否中同一子网中。若两台主机的IP地址分别与它们的子网掩码相“与”后的结果相同，则说明这两台主机在同一子网中。
示例：
I?P?地址　?192.168.0.1
子网掩码　?255.255.255.0
转化为二进制进行运算：
I?P?地址　11010000.10101000.00000000.00000001
子网掩码　11111111.11111111.11111111.00000000
AND运算
?　　　　11000000.10101000.00000000.00000000
转化为十进制后为：
?　　　　192.168.0.0
?
I?P?地址　?192.168.0.254
子网掩码　?255.255.255.0

转化为二进制进行运算：
I?P?地址　11010000.10101000.00000000.11111110
子网掩码　11111111.11111111.11111111.00000000
AND运算
11000000.10101000.00000000.00000000
转化为十进制后为：
192.168.0.0
通过以上对两台计算机IP地址与子网掩码的AND运算后，我们可以看到它运算结果是一样的。均为192.168.0.0，所以这二台计算机可视为是同一子网络。
/*?
*?功能:?判断两台计算机IP地址是同一子网络。?
*?输入参数：????String?Mask:?子网掩码，格式：“255.255.255.0”；?
*???????????????String?ip1:?计算机1的IP地址，格式：“192.168.0.254”；
*???????????????String?ip2:?计算机2的IP地址，格式：“192.168.0.1”；
*???????????????
*?返回值：??????0：IP1与IP2属于同一子网络；?????1：IP地址或子网掩码格式非法；????2：IP1与IP2不属于同一子网络
*/?
public?int?checkNetSegment(String?mask,?String?ip1,?String?ip2)?
{?????
????/*在这里实现功能*/
????return?0;
}

输入描述:

输入子网掩码、两个ip地址
输出描述:

得到计算结果
示例1
输入
复制
255.255.255.0 192.168.224.256 192.168.10.4
输出
复制
1

来自 <https://www.nowcoder.com/practice/34a597ee15eb4fa2b956f4c595f03218?tpId=37&tqId=21262&tPage=2&rp=&ru=%2Fta%2Fhuawei&qru=%2Fta%2Fhuawei%2Fquestion-ranking> 
#include <iostream>
 
using namespace std;
 
int main()
{
    int mask1 = 0, mask2 = 0, mask3 = 0, mask4 = 0;//255.255.255.0
    int ip1a = 0, ip1b = 0, ip1c = 0, ip1d = 0;
    int ip2a = 0, ip2b = 0, ip2c = 0, ip2d = 0;
    char ch;
    while(cin>>mask1>>ch>>mask2>>ch>>mask3>>ch>>mask4)
    {
        cin>>ip1a>>ch>>ip1b>>ch>>ip1c>>ch>>ip1d;
        cin>>ip2a>>ch>>ip2b>>ch>>ip2c>>ch>>ip2d;
        if((mask1 > 255 || mask1 < 0) || (mask2 > 255 || mask2 < 0) || (mask3 > 255 || mask3 < 0) || (mask4 > 255 || mask4 < 0)
            || (ip1a > 255 || ip1a < 0) || (ip1b > 255 || ip1b < 0) || (ip1c > 255 || ip1c < 0) || (ip1d > 255 || ip1d < 0)
            || (ip2a > 255 || ip2a < 0) || (ip2b > 255 || ip2b < 0) || (ip2c > 255 || ip2c < 0) || (ip2d > 255 || ip2d < 0))
            cout<<1<<endl;
        else if(((mask1 & ip1a) == (mask1 & ip2a)) && ((mask2 & ip1b) == (mask2 & ip2b)) && ((mask3 & ip1c) == (mask3 & ip2c)) && ((mask4 & ip1d) == (mask4 & ip2d)))
            cout<<0<<endl;
        else
            cout<<2<<endl;
    }
    return 0;
}
