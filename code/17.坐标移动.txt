题目描述
开发一个坐标计算工具，?A表示向左移动，D表示向右移动，W表示向上移动，S表示向下移动。从（0,0）点开始移动，从输入字符串里面读取一些坐标，并将最终输入结果输出到输出文件里面。
输入：
合法坐标为A(或者D或者W或者S)?+?数字（两位以内）
坐标之间以;分隔。
非法坐标点需要进行丢弃。如AA10;??A1A;??$%$;??YAD;?等。
下面是一个简单的例子?如：
A10;S20;W10;D30;X;A1A;B10A11;;A10;
处理过程：
起点（0,0）
+???A10???=??（-10,0）
+???S20???=??(-10,-20)
+???W10??=??(-10,-10)
+???D30??=??(20,-10)
+???x????=??无效
+???A1A???=??无效
+???B10A11???=??无效
+??一个空?不影响
+???A10??=??(10,-10)
结果?（10，?-10）
注意请处理多组输入输出
输入描述:

一行字符串
输出描述:

最终坐标，以,分隔
示例1
输入
复制
A10;S20;W10;D30;X;A1A;B10A11;;A10;
输出
复制
10,-10

来自 <https://www.nowcoder.com/practice/119bcca3befb405fbe58abe9c532eb29?tpId=37&tqId=21240&tPage=1&rp=&ru=%2Fta%2Fhuawei&qru=%2Fta%2Fhuawei%2Fquestion-ranking> 
#include <iostream>
#include <vector>
#include <string.h>

using namespace std;

int main()
{
    string str;
    
    while(cin >> str)
    {
        //初始化坐标
        int x = 0, y = 0;
        //存储单步操作
        vector<string> steps;
        
        //把字符串拆分 单步 A10 S30
        int wordlen = 0;
        for(int i = 0; i < str.length(); i ++)
        {
            while(str[i] != ';')
                wordlen ++, i ++;
            steps.push_back(str.substr(i - wordlen, wordlen));
            wordlen = 0;
        }
        //分解成功
        //for(auto x : steps) cout << x << endl;
        
        //对单个step执行坐标变换
        for(int i = 0; i < steps.size() ; i ++)
        {
            int num = 0;
            //长度3  A10
            if(steps[i].length() == 3 && steps[i][1] >= '0' && steps[i][1] <= '9' && steps[i][2] >= '0' && steps[i][2] <= '9')
                num = (steps[i][1] - '0') * 10 + steps[i][2] - '0';
            //长度2 A5
            if(steps[i].length() == 2 && steps[i][1] >= '0' && steps[i][1] <= '9')
                num = steps[i][1] - '0';
            
            switch(steps[i][0])//ASDW  x
            {
                case 'A': x -= num; break;
                case 'D': x += num; break;
                case 'W': y += num; break;
                case 'S': y -= num; break;
                default: break;
            }
        }
        cout << x << ',' << y << endl;
    }
    return 0;
}

