题目描述
密码要求:
?
?
?
1.长度超过8位
?
?
?
2.包括大小写字母.数字.其它符号,以上四种至少三种
?
?
?
3.不能有相同长度超2的子串重复
?
?
?
说明:长度超过2的子串

输入描述:

一组或多组长度超过2的子符串。每组占一行
输出描述:

如果符合要求输出：OK，否则输出NG
示例1
输入
复制
021Abc9000021Abc9Abc1021ABC9000021$bc9000
输出
复制
OKNGNGOK

来自 <https://www.nowcoder.com/practice/184edec193864f0985ad2684fbc86841?tpId=37&tqId=21243&tPage=1&rp=&ru=/ta/huawei&qru=/ta/huawei/question-ranking> 
#include <iostream>
#include <vector>
#include <string.h>

using namespace std;

int main()
{
    vector<string> res; //OK NG
    string str;
    while(cin >> str)
    {
        int num[4] = {0};
        //1.长度超过8位
        if(str.size() <= 8)
            res.push_back("NG");
        else{
            //2.包括大小写字母.数字.其它符号,以上四种至少三种
            for(auto it = str.begin(); it != str.end(); it ++)
            {
                if((*it) >= 'A' && (*it) <= 'Z') num[0] = 1;
                else if((*it) >= 'a' && (*it) <= 'z') num[1] = 1;
                else if((*it) >= '0' && (*it) <= '9') num[2] = 1;
                else
                    num[3] = 1;
            }
            
            int count = 0;
            for(int i = 0; i < 4; i ++)
                count += num[i];
            
            if(count < 3)
                res.push_back("NG");
            else{
                //字符串遍历 子串
                // 3.不能有相同长度超2的子串重复
                //查找字符串a是否包含子串b,不是用strA.find(strB) > 0 而是 strA.find(strB) != string:npos
                //其中string::npos是个特殊值，说明查找没有匹配
                //string::size_type pos = strA.find(strB);
                string::size_type pos = 0;
                for(int j = 0; j < str.size(); j ++)
                {
                    string sub_str = str.substr(j, 3);//4 3
                    pos = str.find(sub_str, j + 3);
                    if(pos != string::npos)//匹配了
                    {
                        break;
                    }
                }
                if(pos == string::npos)//没匹配
                    res.push_back("OK");
                else
                    res.push_back("NG");
            }
        }
    }
    for(auto x : res)
        cout<<x<<endl;
    
    return 0;
}
